# -*- coding: utf-8 -*-
"""FinalProject_BarGraphs_Top/Bottom10States

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D62S7Z6hlGlEJEJinP16bFtjDWkGiaSN
"""

#PULLING THE STATES DATA & THEIR COUNTS

import pandas as pd
from collections import Counter

filename = 'sample_data/FinalData.csv'
location_column_name = 'Location'

#Dictionary of keywords: States & their abbreviations
state_keywords = {
    'AL ': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', 'AR': 'Arkansas', 'CA': 'California',
    'CO': 'Colorado', 'CT': 'Connecticut', 'DE': 'Delaware', 'FL': 'Florida', 'GA': 'Georgia',
    'HI': 'Hawaii', 'ID': 'Idaho', 'IL': 'Illinois', 'IN': 'Indiana', 'IA': 'Iowa',
    'KS': 'Kansas', 'KY': 'Kentucky', 'LA': 'Louisiana', 'ME': 'Maine', 'MD': 'Maryland',
    'MA': 'Massachusetts', 'MI': 'Michigan', 'MN': 'Minnesota', 'MS': 'Mississippi', 'MO': 'Missouri',
    'MT': 'Montana', 'NE': 'Nebraska', 'NV': 'Nevada', 'NH': 'New Hampshire', 'NJ': 'New Jersey',
    'NM': 'New Mexico', 'NY': 'New York', 'NC': 'North Carolina', 'ND': 'North Dakota', 'OH': 'Ohio',
    'OK': 'Oklahoma', 'OR': 'Oregon', 'PA': 'Pennsylvania', 'RI': 'Rhode Island', 'SC': 'South Carolina',
    'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah', 'VT': 'Vermont',
    'VA': 'Virginia', 'WA': 'Washington', 'WV': 'West Virginia', 'WI': 'Wisconsin', 'WY': 'Wyoming', 
    'DC': 'Washington DC',
}

data = pd.read_csv(filename)
location_column = data[location_column_name]
state_counts = Counter()
unmatched_states = set(state_keywords.values())
for location in location_column:
    location_states = []
    for word in location.split():
        if word in state_keywords.values() or word in state_keywords.keys():
            if word in state_keywords.values():
                location_states.append(word)
            else:
                location_states.append(state_keywords[word])
    if location_states:
        state_counts.update(location_states)
        for state in location_states:
            unmatched_states.discard(state)
sorted_state_counts = sorted(state_counts.items(), key=lambda x: x[1], reverse=True)

print('States found in the Location column:')
for state, count in sorted_state_counts:
    print(f'{state}: {count}')

print('\nStates NOT found in the Location column:')
for state in sorted(unmatched_states):
    print(state)

#TOP 10 STATES WITH THE MOST JOB OPENINGS

import pandas as pd
from collections import Counter
import plotly.graph_objs as go
import plotly.express as px

filename = 'FinalJobData.csv'
location_column_name = 'Location'
state_keywords = {
    'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', 'AR': 'Arkansas', 'CA': 'California',
    'CO': 'Colorado', 'CT': 'Connecticut', 'DE': 'Delaware', 'FL': 'Florida', 'GA': 'Georgia',
    'HI': 'Hawaii', 'ID': 'Idaho', 'IL': 'Illinois', 'IN': 'Indiana', 'IA': 'Iowa',
    'KS': 'Kansas', 'KY': 'Kentucky', 'LA': 'Louisiana', 'ME': 'Maine', 'MD': 'Maryland',
    'MA': 'Massachusetts', 'MI': 'Michigan', 'MN': 'Minnesota', 'MS': 'Mississippi', 'MO': 'Missouri',
    'MT': 'Montana', 'NE': 'Nebraska', 'NV': 'Nevada', 'NH': 'New Hampshire', 'NJ': 'New Jersey',
    'NM': 'New Mexico', 'NY': 'New York', 'NC': 'North Carolina', 'ND': 'North Dakota', 'OH': 'Ohio',
    'OK': 'Oklahoma', 'OR': 'Oregon', 'PA': 'Pennsylvania', 'RI': 'Rhode Island', 'SC': 'South Carolina',
    'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah', 'VT': 'Vermont',
    'VA': 'Virginia', 'WA': 'Washington', 'WV': 'West Virginia', 'WI': 'Wisconsin', 'WY': 'Wyoming', 'DC': 'Washington DC'
}

data = pd.read_csv(filename)
location_column = data[location_column_name]
state_counts = Counter()
unmatched_states = set(state_keywords.values())
for location in location_column:
    location_states = []
    for word in location.split():
        if word in state_keywords.values() or word in state_keywords.keys():
            if word in state_keywords.values():
                location_states.append(word)
            else:
                location_states.append(state_keywords[word])
    if location_states:
        state_counts.update(location_states)
        for state in location_states:
            unmatched_states.discard(state)
sorted_state_counts = sorted(state_counts.items(), key=lambda x: x[1], reverse=True)

top_10 = dict(sorted_state_counts[:10])

colors = px.colors.qualitative.Plotly

fig1 = go.Figure(data=[go.Bar(x=list(top_10.keys()), y=list(top_10.values()), marker=dict(color=colors[:10]))])
fig1.update_layout(title='Top 10 States with the Most Job Openings')

fig1.show()

import pandas as pd
from collections import Counter
import plotly.graph_objs as go
import plotly.express as px

filename = 'FinalJobData.csv'
location_column_name = 'Location'
state_keywords = {
    'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', 'AR': 'Arkansas', 'CA': 'California',
    'CO': 'Colorado', 'CT': 'Connecticut', 'DE': 'Delaware', 'FL': 'Florida', 'GA': 'Georgia',
    'HI': 'Hawaii', 'ID': 'Idaho', 'IL': 'Illinois', 'IN': 'Indiana', 'IA': 'Iowa',
    'KS': 'Kansas', 'KY': 'Kentucky', 'LA': 'Louisiana', 'ME': 'Maine', 'MD': 'Maryland',
    'MA': 'Massachusetts', 'MI': 'Michigan', 'MN': 'Minnesota', 'MS': 'Mississippi', 'MO': 'Missouri',
    'MT': 'Montana', 'OR': 'Oregon', 'PA': 'Pennsylvania', 'RI': 'Rhode Island', 'SC': 'South Carolina',
    'SD': 'South Dakota', 'NE': 'Nebraska', 'NV': 'Nevada', 'NH': 'New Hampshire', 'NJ': 'New Jersey',
    'NM': 'New Mexico', 'NY': 'New York', 'NC': 'North Carolina', 'ND': 'North Dakota', 'OH': 'Ohio',
    'OK': 'Oklahoma', 'ND': 'North Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah', 'VT': 'Vermont',
    'VA': 'Virginia', 'WA': 'Washington', 'WV': 'West Virginia', 'WI': 'Wisconsin', 'WY': 'Wyoming', 'DC': 'Washington DC'
}

data = pd.read_csv(filename)
location_column = data[location_column_name]
state_counts = Counter()
unmatched_states = set(state_keywords.values())
for location in location_column:
    location_states = []
    for word in location.split():
        if word in state_keywords.values() or word in state_keywords.keys():
            if word in state_keywords.values():
                location_states.append(word)
            else:
                location_states.append(state_keywords[word])
    if location_states:
        state_counts.update(location_states)
        for state in location_states:
            unmatched_states.discard(state)
sorted_state_counts = sorted(state_counts.items(), key=lambda x: x[1])

bottom_10 = dict(sorted_state_counts[:10])

colors = px.colors.qualitative.Alphabet[:len(bottom_10)]

fig = go.Figure(data=[go.Bar(x=list(bottom_10.keys()), y=list(bottom_10.values()), marker=dict(color=colors))])
fig.update_layout(title='10 States with the Least Job Openings')

fig.show()